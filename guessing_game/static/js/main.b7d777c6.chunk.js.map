{"version":3,"sources":["api.js","components/Table.js","components/Question.js","components/Log.js","components/GameArea.js","App.js","reportWebVitals.js","index.js"],"names":["api_root","Table","props","className","leaderboard","map","player","username","points","Question","question","data","is_image","src","word","repeat","length","Log","answer_attempts_log","attempt","type","correct_answer","GameArea","interval","useState","set_username","lobby_code","set_lobby_code","join_code","set_join_code","set_leaderboard","is_lobby_creator","set_is_lobby_creator","is_game_ongoing","set_is_game_ongoing","set_countdown_timer_duration","timer","set_timer","set_question","answer_attempt","set_answer_attempt","set_answer_attempts_log","register_events","ws","io","connect","reconnectionDelayMax","on","emit","alert","error","connect_socket","console","log","countdown_timer_duration","clearInterval","setInterval","concat","temp","JSON","parse","stringify","forEach","create_new_lobby","fetch","method","body","headers","then","json","create_lobby","join_new_lobby","join_lobby","start_game","start_game_api","round_duration","submit_answer","e","key","answer","submit_answer_api","onClick","onChange","target","value","onKeyDown","App","href","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAIMA,EAAW,kD,OCkBFC,EApBD,SAACC,GACX,OACI,sBAAKC,UAAU,sBAAf,UACI,iDACA,uBACA,kCACI,gCACI,+BACI,0CACA,6CAGR,gCACKD,EAAME,YAAYC,KAAI,SAACC,GAAD,OAAa,+BAA0B,6BAAKA,EAAOC,WAAc,6BAAKD,EAAOE,WAAvDF,EAAOC,sBCEzDE,EAfE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACI,qBAAKP,UAAU,eAAf,SACKO,EAASL,KAAI,SAAAM,GACV,OAAIA,EAAKC,SACG,gCAAK,qBAAKC,IAAKF,EAAKG,OAAQ,4BAAI,KAAKC,OAAOJ,EAAKK,aAEjD,sBAAMb,UAAU,0BAAhB,SAA2CQ,EAAKG,aCS7DG,EAhBH,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBACX,OACI,qBAAKf,UAAU,aAAf,SAA4B,8BACvBe,EAAoBb,KAAI,SAACc,GACtB,MAAqB,gBAAjBA,EAAQC,KACD,8BAAID,EAAQZ,SAAZ,KAAwBY,EAAQA,WACjB,gBAAjBA,EAAQC,KACN,oBAAGjB,UAAU,aAAb,UAA2BgB,EAAQZ,SAAnC,oBACe,4BAAjBY,EAAQC,KACN,oBAAGjB,UAAU,YAAb,mCAAgDgB,EAAQE,eAAxD,YADN,UC2INC,EA/IE,WAEb,IAYIC,EAZJ,EAAiCC,mBAAS,IAA1C,mBAAOjB,EAAP,KAAiBkB,EAAjB,KACA,EAAqCD,mBAAS,IAA9C,mBAAOE,EAAP,KAAmBC,EAAnB,KACA,EAAmCH,mBAAS,IAA5C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAuCL,mBAAS,IAAhD,mBAAOpB,EAAP,KAAoB0B,EAApB,KACA,EAAiDN,oBAAS,GAA1D,mBAAOO,EAAP,KAAyBC,EAAzB,KACA,EAA+CR,oBAAS,GAAxD,mBAAOS,EAAP,KAAwBC,EAAxB,KACA,EAAiEV,mBAAS,IAA1E,mBAAiCW,GAAjC,WACA,EAA2BX,mBAAS,GAApC,mBAAOY,EAAP,KAAcC,EAAd,KACA,EAAiCb,mBAAS,IAA1C,mBAAOd,EAAP,KAAiB4B,EAAjB,KACA,EAA6Cd,mBAAS,IAAtD,mBAAOe,EAAP,KAAuBC,EAAvB,KACA,EAAuDhB,mBAAS,IAAhE,mBAAON,EAAP,KAA4BuB,EAA5B,KAIMC,EAAkB,SAACnC,EAAUmB,GAC/B,IAAMiB,EJfgB,SAACpC,EAAUmB,GACrC,IAAMiB,EAAKC,IAAGC,QAJE,uDAImB,CAAEC,qBAAsB,MAO3D,OANAH,EAAGI,GAAG,WAAW,WACbJ,EAAGK,KAAK,OAAQ,CAAEzC,SAAUA,EAAUmB,WAAYA,OAEtDiB,EAAGI,GAAG,SAAS,SAACpC,GACZsC,MAAMtC,EAAKuC,UAERP,EIOQQ,CAAe5C,EAAUmB,GACpCiB,EAAGI,GAAG,sBAAsB,SAACpC,GACzByC,QAAQC,IAAI1C,GACZmB,EAAgBnB,MAEpBgC,EAAGI,GAAG,gBAAgB,SAACpC,GACnB2B,EAAa3B,GACbuB,GAAoB,GAGpBC,GAA6B,SAACmB,GAE1B,OADAjB,EAAUiB,GACHA,KAEXC,cAAchC,GACdA,EAAWiC,aAAY,WAAQnB,GAAU,SAAAD,GAAK,OAAIA,EAAQ,OAAM,QAEpEO,EAAGI,GAAG,kBAAkB,SAACpC,GACrBA,EAAKS,KAAO,cACZqB,GAAwB,SAAAvB,GAAmB,OAAIA,EAAoBuC,OAAO9C,SAE9EgC,EAAGI,GAAG,kBAAkB,SAACpC,GACrBA,EAAKS,KAAO,cACZqB,GAAwB,SAAAvB,GAAmB,OAAIA,EAAoBuC,OAAO9C,SAE9EgC,EAAGI,GAAG,2BAA2B,SAACpC,GAC9BA,EAAKS,KAAO,0BACZqB,GAAwB,SAAAvB,GAAmB,OAAIA,EAAoBuC,OAAO9C,SAE9EgC,EAAGI,GAAG,aAAa,SAACpC,GAChB4C,cAAchC,GACdW,GAAoB,GACpBJ,GAAgB,SAAA1B,GACZ6C,MAAM,GAAD,OAAI7C,EAAY,GAAGG,SAAnB,oBAEL,IAAImD,EAAOC,KAAKC,MAAMD,KAAKE,UAAUzD,IAErC,OADAsD,EAAKI,SAAQ,SAAAxD,GAAM,OAAIA,EAAOE,OAAS,KAChCkD,SAKbK,EAAmB,YJ9CD,SAACxD,GACzB,OAAOyD,MAAM,GAAD,OAAIhE,EAAJ,iBAA6B,CACrCiE,OAAQ,OACRC,KAAMP,KAAKE,UAAU,CAAE,SAAYtD,IACnC4D,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAzD,GACJ,OAAOA,EAAK0D,WIuCZC,CAAa/D,GAAU6D,MAAK,SAAAzD,GACxByC,QAAQC,IAAI1C,GACRA,EAAKuC,MACLD,MAAMtC,EAAKuC,QAGfvB,EAAehB,EAAKe,YACpBM,GAAqB,GACrBU,EAAgBnC,EAAUI,EAAKe,iBAGjC6C,GAAiB,YJ9CD,SAAChE,EAAUqB,GACjC,OAAOoC,MAAM,GAAD,OAAIhE,EAAJ,eAA2B,CACnCiE,OAAQ,OACRC,KAAMP,KAAKE,UAAU,CAAE,SAAYtD,EAAU,WAAcqB,IAC3DuC,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAzD,GACJ,OAAOA,EAAK0D,WIuCZG,CAAWjE,EAAUqB,GAAWwC,MAAK,SAAAzD,GACjCyC,QAAQC,IAAI1C,GACRA,EAAKuC,MACLD,MAAMtC,EAAKuC,QAGfvB,EAAeC,GACfc,EAAgBnC,EAAUqB,QAI5B6C,GAAa,YJ9CO,SAAClE,EAAUmB,GACrC,OAAOsC,MAAM,GAAD,OAAIhE,EAAJ,eAA2B,CACnCiE,OAAQ,OACRC,KAAMP,KAAKE,UAAU,CAAE,SAAYtD,EAAU,WAAcmB,IAC3DyC,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAzD,GACJ,OAAOA,EAAK0D,WIuCZK,CAAenE,EAAUmB,GAAY0C,MAAK,SAAAzD,GACtCyC,QAAQC,IAAI1C,GACRA,EAAKuC,MACLD,MAAMtC,EAAKuC,QAGff,EAA6BxB,EAAKgE,gBAClCtC,EAAU1B,EAAKgE,gBACfzC,GAAoB,QAItB0C,GAAgB,SAACC,GACL,UAAVA,EAAEC,MJhDmB,SAACvE,EAAUmB,EAAYqD,GACpD,OAAOf,MAAM,GAAD,OAAIhE,EAAJ,kBAA8B,CACtCiE,OAAQ,OACRC,KAAMP,KAAKE,UAAU,CAAE,SAAYtD,EAAU,WAAcmB,EAAY,OAAUqD,IACjFZ,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAzD,GACJ,OAAOA,EAAK0D,UIyCRW,CAAkBzE,EAAUmB,EAAYa,GAAgB6B,MAAK,SAAAzD,GACzDyC,QAAQC,IAAI1C,GACRA,EAAKuC,OACLD,MAAMtC,EAAKuC,UAInBV,EAAmB,MAI3B,OACId,EAAa,6CACC,uBACV,qEAAiCA,MACjC,uBACA,sBAAKvB,UAAU,UAAf,UACI,cAAC,EAAD,CAAOC,YAAaA,IACpB,cAAC,EAAD,CAAKc,oBAAqBA,OAE7Ba,IAAqBE,EAAkB,wBAAQgD,QAAS,kBAAMR,MAAvB,wBAA2D,KAClGxC,EAAkB,mCAAE,gCACjB,cAAC,EAAD,CAAUvB,SAAUA,IACpB,uBAFiB,UAGV,uBAAOwE,SAAU,SAACL,GAAD,OAAOrC,EAAmBqC,EAAEM,OAAOC,QAAQA,MAAO7C,EAAgB8C,UAAW,SAACR,GAAD,OAAOD,GAAcC,MAC1H,uBACA,4BAAIzC,SAGF,QAEN,kDAEI,uBAAO8C,SAAU,SAACL,GAAD,OAAOpD,EAAaoD,EAAEM,OAAOC,UAFlD,MAII,wBAAQH,QAAS,kBAAMlB,KAAvB,4BAAkE,uBAJtE,KAKM,uBALN,oBAOI,uBAAOmB,SAAU,SAACL,GAAD,OAAOhD,EAAcgD,EAAEM,OAAOC,UAPnD,MASI,wBAAQH,QAAS,SAACJ,GAAD,OAAON,MAAxB,8BChIDe,MAbf,WACE,OACE,sBAAKnF,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,UAAf,UACE,mBAAGoF,KAAK,sBAAR,SAA8B,qBAAKpF,UAAU,eAAeqF,MAAM,QAAQC,OAAO,QAAQ5E,IAAI,qDAC7F,mBAAG0E,KAAK,8BAAR,SAAsC,qBAAKpF,UAAU,eAAeqF,MAAM,QAAQC,OAAO,QAAQ5E,IAAI,sIACrG,mBAAGsE,OAAO,SAASI,KAAK,iCAAxB,SAAyD,4DCElDG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b7d777c6.chunk.js","sourcesContent":["import io from 'socket.io-client'\n\n//const api_root = \"http://127.0.0.1:5000\"\n//const ws_api_root = \"ws://127.0.0.1:5000/socket\"\nconst api_root = \"https://guessing-game-agzuniverse.herokuapp.com\"\nconst ws_api_root = \"wss://guessing-game-agzuniverse.herokuapp.com/socket\"\n\n\nexport const connect_socket = (username, lobby_code) => {\n    const ws = io.connect(ws_api_root, { reconnectionDelayMax: 10000 })\n    ws.on('connect', () => {\n        ws.emit('join', { username: username, lobby_code: lobby_code })\n    })\n    ws.on('error', (data) => {\n        alert(data.error)\n    })\n    return ws\n}\n\nexport const create_lobby = (username) => {\n    return fetch(`${api_root}/create_lobby`, {\n        method: 'POST',\n        body: JSON.stringify({ \"username\": username }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(data => {\n        return data.json()\n    })\n}\n\nexport const join_lobby = (username, join_code) => {\n    return fetch(`${api_root}/join_lobby`, {\n        method: 'POST',\n        body: JSON.stringify({ \"username\": username, \"lobby_code\": join_code }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(data => {\n        return data.json()\n    })\n}\n\nexport const start_game_api = (username, lobby_code) => {\n    return fetch(`${api_root}/start_game`, {\n        method: 'POST',\n        body: JSON.stringify({ \"username\": username, \"lobby_code\": lobby_code }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(data => {\n        return data.json()\n    })\n}\n\nexport const submit_answer_api = (username, lobby_code, answer) => {\n    return fetch(`${api_root}/submit_answer`, {\n        method: 'POST',\n        body: JSON.stringify({ \"username\": username, \"lobby_code\": lobby_code, \"answer\": answer }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(data => {\n        return data.json()\n    })\n}","import React from 'react';\n\nconst Table = (props) => {\n    return (\n        <div className='leaderboard_wrapper'>\n            <span> LEADERBOARD </span>\n            <br />\n            <table>\n                <thead>\n                    <tr>\n                        <th>Username</th>\n                        <th>Points</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.leaderboard.map((player) => (<tr key={player.username}><td>{player.username}</td><td>{player.points}</td></tr>))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Table","import React from 'react';\n\nconst Question = ({ question }) => {\n    return (\n        <div className=\"question_box\">\n            {question.map(data => {\n                if (data.is_image) {\n                    return (<div><img src={data.word} /><p>{\"_ \".repeat(data.length)}</p></div>)\n                } else {\n                    return (<span className='non_image_question_part'>{data.word}</span>)\n                }\n\n            })}\n        </div>\n    )\n}\n\nexport default Question","import React, { useState, useEffect } from 'react';\n\nconst Log = ({ answer_attempts_log }) => {\n    return (\n        <div className=\"answer_log\"><div>\n            {answer_attempts_log.map((attempt) => {\n                if (attempt.type === 'ans_attempt')\n                    return <p>{attempt.username}: {attempt.attempt}</p>\n                else if (attempt.type === 'correct_ans')\n                    return <p className='green_text'>{attempt.username} got it right!</p>\n                else if (attempt.type === 'correct_answer_to_round')\n                    return <p className='cyan_text'>The correct answer is {attempt.correct_answer}!</p>\n            })}\n        </div>\n        </div>\n    )\n}\n\nexport default Log","import React, { useState, useEffect } from 'react';\nimport { create_lobby, join_lobby, connect_socket, start_game_api, submit_answer_api } from \"../api\";\nimport Table from './Table';\nimport Question from './Question';\nimport Log from './Log';\n\nconst GameArea = () => {\n\n    const [username, set_username] = useState(\"\")\n    const [lobby_code, set_lobby_code] = useState(\"\")\n    const [join_code, set_join_code] = useState(\"\")\n    const [leaderboard, set_leaderboard] = useState([])\n    const [is_lobby_creator, set_is_lobby_creator] = useState(false)\n    const [is_game_ongoing, set_is_game_ongoing] = useState(false)\n    const [countdown_timer_duration, set_countdown_timer_duration] = useState(45)\n    const [timer, set_timer] = useState(0)\n    const [question, set_question] = useState([])\n    const [answer_attempt, set_answer_attempt] = useState(\"\")\n    const [answer_attempts_log, set_answer_attempts_log] = useState([])\n\n    let interval;\n\n    const register_events = (username, lobby_code) => {\n        const ws = connect_socket(username, lobby_code)\n        ws.on('leaderboard_update', (data) => {\n            console.log(data);\n            set_leaderboard(data)\n        })\n        ws.on('new_question', (data) => {\n            set_question(data)\n            set_is_game_ongoing(true)\n            // Hack to set timer as the latest value of countdown_timer_duration\n            // because otherwise only the default state is available here\n            set_countdown_timer_duration((countdown_timer_duration) => {\n                set_timer(countdown_timer_duration)\n                return countdown_timer_duration\n            })\n            clearInterval(interval)\n            interval = setInterval(() => { set_timer(timer => timer - 1) }, 1000)\n        })\n        ws.on('answer_attempt', (data) => {\n            data.type = \"ans_attempt\"\n            set_answer_attempts_log(answer_attempts_log => answer_attempts_log.concat(data))\n        })\n        ws.on('correct_answer', (data) => {\n            data.type = \"correct_ans\"\n            set_answer_attempts_log(answer_attempts_log => answer_attempts_log.concat(data))\n        })\n        ws.on('correct_answer_to_round', (data) => {\n            data.type = \"correct_answer_to_round\"\n            set_answer_attempts_log(answer_attempts_log => answer_attempts_log.concat(data))\n        })\n        ws.on('game_over', (data) => {\n            clearInterval(interval)\n            set_is_game_ongoing(false)\n            set_leaderboard(leaderboard => {\n                alert(`${leaderboard[0].username} is the winner!`)\n                // Hack to deep-copy array\n                let temp = JSON.parse(JSON.stringify(leaderboard))\n                temp.forEach(player => player.points = 0)\n                return temp\n            })\n        })\n    }\n\n    const create_new_lobby = () => {\n        create_lobby(username).then(data => {\n            console.log(data)\n            if (data.error) {\n                alert(data.error)\n                return\n            }\n            set_lobby_code(data.lobby_code)\n            set_is_lobby_creator(true)\n            register_events(username, data.lobby_code)\n        })\n    }\n    const join_new_lobby = () => {\n        join_lobby(username, join_code).then(data => {\n            console.log(data)\n            if (data.error) {\n                alert(data.error)\n                return\n            }\n            set_lobby_code(join_code)\n            register_events(username, join_code)\n        })\n    }\n\n    const start_game = () => {\n        start_game_api(username, lobby_code).then(data => {\n            console.log(data);\n            if (data.error) {\n                alert(data.error)\n                return\n            }\n            set_countdown_timer_duration(data.round_duration)\n            set_timer(data.round_duration)\n            set_is_game_ongoing(true)\n        })\n    }\n\n    const submit_answer = (e) => {\n        if (e.key === 'Enter') {\n            submit_answer_api(username, lobby_code, answer_attempt).then(data => {\n                console.log(data);\n                if (data.error) {\n                    alert(data.error)\n                    return\n                }\n            })\n            set_answer_attempt('')\n        }\n    }\n\n    return (\n        lobby_code ? <div>\n            GAME LOBBY<br />\n            <strong> Code to join lobby: {`${lobby_code}`}</strong>\n            <br />\n            <div className=\"top_bar\">\n                <Table leaderboard={leaderboard} />\n                <Log answer_attempts_log={answer_attempts_log} />\n            </div>\n            {is_lobby_creator && !is_game_ongoing ? <button onClick={() => start_game()}>Start Game</button> : null}\n            {is_game_ongoing ? <><div>\n                <Question question={question} />\n                <br />\n                ANSWER:<input onChange={(e) => set_answer_attempt(e.target.value)} value={answer_attempt} onKeyDown={(e) => submit_answer(e)}></input>\n                <br />\n                <p>{timer}</p>\n            </div>\n            </>\n                : null}\n        </div> :\n            <div>\n                Enter username:\n                <input onChange={(e) => set_username(e.target.value)}></input>\n                and\n                <button onClick={() => create_new_lobby()}> Create Lobby </button><br />\n                OR<br />\n                Enter lobby code:\n                <input onChange={(e) => set_join_code(e.target.value)}></input>\n                and\n                <button onClick={(e) => join_new_lobby()}> Join Lobby </button>\n            </div>\n    );\n}\n\nexport default GameArea;\n","import './App.css';\nimport GameArea from './components/GameArea';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameArea />\n      <div className='credits'>\n        <a href=\"https://pixabay.com\"><img className='credit_image' width=\"100px\" height=\"100px\" src=\"https://pixabay.com/static/img/logo_square.png\" /></a>\n        <a href=\"https://www.themoviedb.org/\"><img className='credit_image' width=\"100px\" height=\"100px\" src=\"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg\" /></a>\n        <a target=\"_blank\" href=\"https://agzuniverse.github.io/\"><span>Made by Aswin G</span></a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}